class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int ans = 0, n = initial.size(), minCnt = graph.size(); 
        sort(initial.begin(), initial.end());
        for(int i : initial) {
            int cnt = bfs(graph, initial, i);
            if(cnt < minCnt) minCnt = cnt, ans = i;
        }
        return ans;
    }
    
private:
    int bfs(vector<vector<int>>& graph, vector<int>& initial, int node) {
        queue<int> q;
        unordered_set<int> st = {node};
        int cnt = 0;
        for(int i : initial) if(i != node) q.push(i);
        while(!q.empty()) {
            int cur = q.front(); q.pop();
            if(st.count(cur)) continue;
            st.insert(cur); cnt++;
            for(int i = 0; i < graph.size(); i++) if(i != cur && graph[cur][i]) q.push(i);
        }
        return cnt;
    }
};
/*
(This problem is the same as Minimize Malware Spread, with the differences bolded.)

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and
 at least one of those two nodes is infected by malware, both nodes will be infected by malware. 
  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after 
the spread of malware stops.

We will remove one node from the initial list, completely removing it and any connections from this
 node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple 
 nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

*/